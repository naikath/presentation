---
import { Image } from 'astro:assets';

import skillItems from '../../data/skills/items.json'

// The skill name and descriptions are separated
// This part is static and is run at build time
// to be able to interpolate values in the component
// The dynamic part that requires JS is separated
---

<div class='card-skill'>
	<h2>Skills</h2>
	<section>
		<h3>JS</h3>
		<div class='icon-grid'>
			{
				skillItems.map(skill => {
					return (
						<div
							class='icon'
							data-id={skill.id}
							data-name={skill.name}
							data-img={skill.img}
							tabindex='0'
						>
							<Image src={skill.img} alt={`${skill.name} icon`} width='60' height='60' />
						</div>
					);
				})
			}
		</div>
	</section>

	<div class='description active'>
		<h3>
			<img src='' alt='Icon' width='40' height='40' />
			<p class='title'>Title</p>
		</h3>
		<p class='content'>Description</p>
		<button>Ã—</button>
	</div>
</div>

<style>
	.card-skill {
		--spacing: 0.5rem;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		text-align: center;
	}

	h2 {
		font-size: 2rem;
	}

	/* SKILL SECTION */

	section {
		display: flex;
		flex-direction: column;
		gap: var(--spacing);
		border: 3px dotted white;
		padding: var(--spacing);
	}

	h3 {
		font-size: 1.5rem;
	}

	.icon-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
		justify-content: right;
		gap: var(--spacing);
	}

	/* ICONS */

	.icon {
		border: 2px solid transparent;
		border-radius: 1rem;
		background-color: hsla(0, 0%, 68%, 0.8);
		aspect-ratio: 1;
		user-select: none;
	}

	.icon img {
		width: 100%;
		height: 100%;
		object-fit: contain;
	}

	.icon:focus-within {
		border-color: red;
	}

	/* DESCRIPTION */

	.description {
		display: none;
		position: relative;
		border-radius: 1rem;
		background-color: hsla(0, 0%, 68%, 0.8);
		padding: 0.7rem;
		font-size: 1rem;
		text-align: start;
	}

	.description.show {
		display: block;
	}

	.description h3 {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.description button {
		position: absolute;
		top: 0;
		right: 0;
		cursor: pointer;
		border: none;
		border-top-right-radius: 1rem;
		border-bottom-left-radius: 0.2rem;
		background-color: hsl(0, 0%, 0%, 0.5);
		padding: 0.3rem;
		aspect-ratio: 1;
		width: 2.4rem;
		color: white;
		font-size: 1.4rem;
	}

	.description button:hover {
		background-color: hsl(0, 0%, 0%, 0.9);
	}
</style>

<script>
	import skillDescriptions from './../../data/skills/descriptions.json';

	// add event listeners to the items
	// so when clicked, they select the description and set the content to the description object of the list

	const card = document.querySelector('.card-skill');
	const itemList = card.querySelectorAll('.icon') as NodeListOf<HTMLElement>;
	const itemDescription = card.querySelector('.description') as HTMLElement;

	const descriptionParts = {
		img: itemDescription.querySelector('img') as HTMLImageElement,
		title: itemDescription.querySelector('.title') as HTMLElement,
		content: itemDescription.querySelector('.content') as HTMLElement,
		button: itemDescription.querySelector('button') as HTMLButtonElement,
	};

	descriptionParts.button.addEventListener('click', () => {
		itemDescription.classList.remove('show');
	});

	function getItemDesc(id: number | string) {
		if (typeof id === 'string') id = Number.parseInt(id);
		return skillDescriptions.find(skill => skill.id === id).description;
	}

	itemList.forEach(item => {
		item.addEventListener('click', () => {
			descriptionParts.img.src = item.dataset.img;
			descriptionParts.img.alt = `${item.dataset.name} icon`;
			descriptionParts.title.innerText = item.dataset.name;

			const description = getItemDesc(item.dataset.id);
			descriptionParts.content.innerText = description;

			itemDescription.classList.add('show');
		});
	});
</script>
