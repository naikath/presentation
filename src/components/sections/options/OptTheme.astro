---
import Button from './Button.astro';
import { themes } from '../../../utils/theme';
---

<div class='opt-theme'>
	<h3>Theme</h3>
	<form class='theme'>
		{
			themes.map(theme => {
				return (
					<label>
						<input
							type='radio'
							name='theme'
							value={theme}
						/>
						{theme[0].toUpperCase() + theme.slice(1)}
					</label>
				);
			})
		}
		<Button type='button'>Change</Button>
	</form>
</div>

<style>
	.opt-theme {
		font-size: 1.3rem;
	}

	h3 {
		margin-bottom: 0.4em;
		font-weight: 400;
	}

	form {
		display: flex;
		flex-direction: column;
		align-items: flex-start;
		gap: 0.5em;
	}

	input {
		margin-right: 0.3em;
	}
</style>

<script>
	import { getCurrentTheme, setTheme, type Theme } from '../../../utils/theme';

	const themeOptions = document.querySelectorAll(
		'.opt-theme input[type="radio"]',
	) as NodeListOf<HTMLInputElement>;

	let currentTheme = getCurrentTheme();

	themeOptions.forEach(element => {
		const inputLang = element.value as Theme;
		if (inputLang === currentTheme) {
			element.checked = true;
		}
		element.addEventListener('change', () => {
			if (inputLang !== currentTheme) {
				setButtonTheme(inputLang);
			} else {
				setButtonTheme(false);
			}
		});
	});

	const button = document.querySelector('.opt-theme button') as HTMLButtonElement;
	const inputTheme = {
		value: 'cyan',
	};

	button.addEventListener('click', () => {
		const newTheme = inputTheme.value as Theme;
		setTheme(newTheme);
		currentTheme = newTheme;
		setButtonTheme(false);
	});

	function setButtonTheme(newTheme: Theme | false) {
		if (newTheme) {
			button?.classList.remove('disabled');
			button.removeAttribute('disabled');
			inputTheme.value = newTheme;
		} else {
			button?.classList.add('disabled');
			button.setAttribute('disabled', '');
		}
	}
</script>
